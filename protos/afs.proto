
syntax = "proto3";

package afs;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message TimeSpec {
  uint64 sec = 1;
  uint64 nsec = 2;
}

message FileSystemRequest {
  string path = 1;
}

message FileSystemRemoveRequest {
  string path = 1;
}

message FileSystemCreateRequest {
  string path = 1;
}

message FileSystemRenameRequest {
  string fromPath = 1;
  string toPath = 2;
}

message FileSystemMakedirRequest {
  string path = 1;
}

message FileSystemRemovedirRequest {
  string path = 1;
}

message FileSystemSetLockRequest {
  string path = 1;
}

message FileSystemReleaseLockRequest {
  string path = 1;
}

message FileSystemStatRequest {
  string path = 1;
}

message FileSystemReaddirRequest {
  string path = 1;
}

message FileSystemStatResponse {
  int32 status = 1;
  int32 uid = 2;
  int32 gid = 3;
  uint64 size = 4;
  uint32 mode = 5;
  uint32 nlink = 6;
  TimeSpec lastAccess = 7;
  TimeSpec lastModification = 8;
  TimeSpec lastStatusChange = 9;
  int32 dev = 10;
  int32 rdev = 11;
  uint32 inodeNum = 12;
  uint32 blksize = 13;
  uint32 blocksNum = 14;
}

message FileSystemReaddirResponse {
  repeated string fileName = 1;
  int32 status = 2;
}

message FileSystemResponse {
  int32 status = 1;
  string data = 2;
}

message FileSystemFetchRequest {
  string path = 1;
  int32 size = 3;
  int32 offset = 4;
}

message FileSystemFetchResponse {
  int32 status = 1;
  string data = 2;
  TimeSpec lastModification = 7;
}

message FileSystemStoreRequest {
  string path = 1;
  string data = 2;
}

message FileSystemStoreResponse {
  int32 status = 1;
}

service FileSystem {
  // Fetch: Returns the status and (optionally) data of the specified file or directory.
  rpc Fetch (FileSystemFetchRequest) returns (FileSystemFetchResponse) {} 
  // Store the status and (optionally) data of the specified file.
  rpc Store (FileSystemStoreRequest) returns (FileSystemStoreResponse) {}
  // Deletes the specified file
  rpc Remove (FileSystemRemoveRequest) returns (FileSystemResponse) {}
  // Create a new file
  rpc Create (FileSystemCreateRequest) returns (FileSystemResponse) {}  
  // Change the name of a file or directory
  rpc Rename (FileSystemRenameRequest) returns (FileSystemResponse) {}
  // Makedir creates a new directory
  rpc Makedir (FileSystemMakedirRequest) returns (FileSystemResponse) {}
  // Removedir deletes the specified directory which must be empty
  rpc Removedir (FileSystemRemovedirRequest) returns (FileSystemResponse) {}
  // Stat: gets attribute 
  rpc Stat (FileSystemStatRequest) returns (FileSystemStatResponse) {}
  // Readdir: Reading contents of a directory
  rpc Readdir (FileSystemReaddirRequest) returns (FileSystemReaddirResponse) {}
}



// NOt to be done.
// Set lock
// rpc SetLock (FileSystemSetLockRequest) returns (FileSystemResponse) {}
// Release lock: Unlocks the specified file or directory
// rpc ReleaseLock (FileSystemReleaseLockRequest) returns (FileSystemResponse) {}
